name: Update GitHub Activity
on:
  schedule:
    - cron: '0 15 * * *'  # 매일 오전 0시 (KST 기)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate React Activity Summary
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_USER: hsyeun
        run: |
          set -euo pipefail
          echo "" >> activity.md

          # 내 퍼블릭 이벤트 모두 수집 (최대 최근 300건)
          gh api -H "Accept: application/vnd.github+json" \
            /users/${GITHUB_USER}/events/public \
            --paginate \
            > events_pages.json

          # pages(json 배열들)을 하나의 배열로 병합
          jq -s 'add' events_pages.json > events.json

          # 2) 필요한 이벤트만 정규화
          jq -r --arg user "$GITHUB_USER" '
            [ .[]
              | select(.repo.name | split("/")[0] != $user)
              | if .type == "IssueCommentEvent" then
                  {
                    repo: .repo.name,
                    type: "Comment",
                    number: (.payload.issue.number),
                    url: ("https://github.com/" + .repo.name + "/issues/" + (.payload.issue.number|tostring)),
                    title: (.payload.issue.title // "(no title)"),
                    ts: .created_at
                  }
                elif .type == "IssuesEvent" and .payload.action == "opened" then
                  {
                    repo: .repo.name,
                    type: "Issue",
                    number: (.payload.issue.number),
                    url: .payload.issue.html_url,
                    title: (.payload.issue.title // "(no title)"),
                    ts: .created_at
                  }
                elif .type == "PullRequestEvent" and .payload.action == "closed" then
                  {
                    repo: .repo.name,
                    type: "Pull Request",
                    number: (.payload.pull_request.number),
                    url: .payload.pull_request.html_url,
                    title: (.payload.pull_request.title // "(no title)"),
                    ts: .created_at
                  }
                else empty end
            ]' events.json > activities.json
          
          # 3) 아무 활동도 없을 때 안내
          if [ "$(jq 'length' activities.json)" = "0" ]; then
            echo "_No recent external activity found._" >> activity.md
            echo "" >> activity.md
            echo "_Last updated: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S UTC')_" >> activity.md
            cat activity.md
            exit 0
          fi

          # 4) Repo별 그룹 + 활동 수 + 최신순 정렬(이벤트 발생 시각)
          repos=$(jq -r '.[].repo' activities.json | sort -u)
          for repo in $repos; do
            count=$(jq -r --arg repo "$repo" '[.[] | select(.repo==$repo)] | length' activities.json)
            echo "### ${repo} (${count} activities)" >> activity.md
      
            jq -r --arg repo "$repo" '
              [.[] | select(.repo==$repo)]
              | sort_by(.ts) | reverse | .[]
              | "- " +
                (if .type=="Comment" then "(Comment)"
                 elif .type=="Issue" then "(Issue)"
                 elif .type=="Pull Request" then "(Pull Request)"
                 else "• (Activity)" end)
                + " [#" + (.number|tostring) + "](" + .url + ") " + .title + " (" + (.ts[0:10]) + ")"
            ' activities.json | head -n 5 >> activity.md
      
            echo "" >> activity.md
          done

          # 5. Timestamp
          echo "_Last updated: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S UTC') ($(TZ='Asia/Seoul' date '+%Y-%m-%d %H:%M:%S KST'))_" >> activity.md

          echo "===== Generated activity.md ====="
          cat activity.md

      - name: Merge into README
        run: |
          set -euo pipefail
          awk '
            /<!--ACTIVITY_START-->/ {print; system("cat activity.md"); skip=1; next}
            /<!--ACTIVITY_END-->/ {skip=0}
            !skip
          ' README.md > tmp && mv tmp README.md

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --quiet --exit-code README.md; then
            echo "No changes detected."
          else
            git add README.md
            git commit -m "chore: update OpenAPI Activity"
            git push
          fi
