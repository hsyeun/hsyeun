name: Update GitHub Activity
on:
  schedule:
    - cron: '0 15 * * *'  # 매일 오전 0시 (KST 기)
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate React Activity Summary
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
          GITHUB_USER: hsyeun
        run: |
          set -euo pipefail
          echo "" >> activity.md

          # 1. Fetch all activities (comments, issues, PRs)
          echo "Fetching recent activities..."
          gh api -H "Accept: application/vnd.github+json" \
            search/issues \
            -f q="(commenter:${GITHUB_USER}+OR+author:${GITHUB_USER})+-user:${GITHUB_USER}" \
            --paginate \
            --jq '[.items[] | {
              repo: ((.repository_url | split("/"))[-2] + "/" + (.repository_url | split("/"))[-1]),
              num: ("#" + (.number|tostring)),
              url: .html_url,
              title: .title,
              updated: .updated_at,
              updated_short: .updated_at[0:10],
              type: (if .pull_request then "Pull Request"
                     elif (.html_url | test("/issues/")) then "Issue"
                     else "Comment" end)
            }]' > all_activities.json

          # 2. Group by repository (sorted latest first)
          echo "Grouping and sorting by date..."
          repos=$(jq -r '.[].repo' all_activities.json | sort -u)

          for repo in $repos; do
            echo "### ${repo}" >> activity.md

            jq -r --arg repo "$repo" '
              [.[] | select(.repo==$repo)]
              | sort_by(.updated)
              | reverse
              | .[]
              | "- " +
                (if .type=="Comment" then "(Comment)"
                 elif .type=="Issue" then "(Issue)"
                 elif .type=="Pull Request" then "(Pull Request)"
                 else "• (Activity)" end)
                + " [\(.num)](\(.url)) " + .title + " (\(.updated_short))"
            ' all_activities.json | head -n 5 >> activity.md

            echo "" >> activity.md
          done

          # 3. Append timestamp (UTC)
          echo "_Last updated: $(TZ='UTC' date '+%Y-%m-%d %H:%M:%S UTC')_" >> activity.md

          echo ""
          echo "===== Generated activity.md ====="
          cat activity.md
          echo "================================="

      - name: Merge into README
        run: |
          set -euo pipefail
          awk '
            /<!--ACTIVITY_START-->/ {print; system("cat activity.md"); skip=1; next}
            /<!--ACTIVITY_END-->/ {skip=0}
            !skip
          ' README.md > tmp && mv tmp README.md

      - name: Commit & Push
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          if git diff --quiet --exit-code README.md; then
            echo "No changes detected."
          else
            git add README.md
            git commit -m "chore: update OpenAPI Activity"
            git push
          fi
